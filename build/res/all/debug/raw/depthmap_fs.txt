
precision mediump float;
uniform samplerCube sDepthMap;
uniform vec3 uLightPos;
uniform vec3 uColor;

varying vec4 vPositionModel;
varying vec4 vPositionView;
varying vec3 vNormal;

float unpack (vec4 colour) {
    const vec4 bit_shift = vec4(1.0 / (256.0 * 256.0 * 256.0), 1.0 / (256.0 * 256.0), 1.0 / 256.0, 1.0);
	return dot(colour, bit_shift);
}

void main() {
	float diffuse = 0.0;
	float specular = 0.0;
	vec3 lightDir = uLightPos - vPositionModel.xyz;
	vec3 N = normalize(vNormal);
	vec3 L = normalize(lightDir);		
	float lambert = dot(N, L);
	if (lambert > 0.0) {
		diffuse = lambert * 0.7;
		vec3 R = reflect(-L, N);
		vec3 E = normalize(-vPositionView.xyz);
		specular = pow(max(dot(R, E), 0.0), 32.0) * 0.3;
	}
	gl_FragColor = vec4(uColor * (0.4 + diffuse + specular), 1.0);
	
	const float linearDepthConstant = 1.0 / (40.0 - 0.1);
	float depth = length(lightDir) * linearDepthConstant;
	
	const float c = 8.0;
	vec4 texel = textureCube(sDepthMap, -lightDir);
	gl_FragColor.rgb *= clamp(exp(-c * (depth - unpack(texel))), 0.6, 1.0);
}
